import {  ActionReducerMapBuilder, createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { GetAllIngredientsAsyncQuery } from "../../contracts/ingredients/GetAllIngredientsAsyncQuery";
import { IngredientState, PaginatedItems } from "../../contracts/ingredients/IIngredientState";
import { Ingredient } from "../../contracts/ingredients/IngredientDto";
import { AddNewIngredient, GetAllIngredients } from "./ingredientApi";
  
const initialState: IngredientState = {
    ingredients: new PaginatedItems<Ingredient>(0, []),
    ingredientsStatus: 'idle',

    lastAddedIngredientId: -1,
    lastAddedIngredientIdStatus: 'idle',
};


export const getAllIngredientsAsync = createAsyncThunk(
    'ingredient/getAll',
    async (query: GetAllIngredientsAsyncQuery) => {
        const response = await GetAllIngredients(query.pageNumber, query.pageSize);
        return response.data;
    }
);

export const addNewIngredientAsync = createAsyncThunk(
    'ingredient/add',
    async (ingredient: Ingredient) => {
        const response = await AddNewIngredient(ingredient);
        return response.data;
    }
);

export const ingredientReducer = createSlice({
    name: 'ingredient',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        addNewIngredient: (state, action: PayloadAction<Ingredient>) => {
            state.ingredients.itemsSlice.push(action.payload);
            state.ingredients.count++;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        addCasesFor_getAllIngredientsAsync(builder);
        addCasesFor_addNewIngredientAsync(builder);
    },
});

const addCasesFor_getAllIngredientsAsync = (builder: ActionReducerMapBuilder<IngredientState>) => {
    builder
        .addCase(getAllIngredientsAsync.pending, (state) => {
            state.ingredientsStatus = 'loading';
        })
        .addCase(getAllIngredientsAsync.fulfilled, (state, action) => {
            state.ingredientsStatus = 'idle';
            state.ingredients = action.payload;
        })
        .addCase(getAllIngredientsAsync.rejected, (state) => {
            state.ingredientsStatus = 'failed';
        });
}

const addCasesFor_addNewIngredientAsync = (builder: ActionReducerMapBuilder<IngredientState>) => {
    builder
        .addCase(addNewIngredientAsync.pending, (state) => {
            state.lastAddedIngredientIdStatus = 'loading';
        })
        .addCase(addNewIngredientAsync.fulfilled, (state, action) => {
            state.lastAddedIngredientIdStatus = 'idle';
            state.lastAddedIngredientId = action.payload;
        })
        .addCase(addNewIngredientAsync.rejected, (state) => {
            state.lastAddedIngredientIdStatus = 'failed';
        });
}

export const selectIngredients = (state: RootState) => state.ingredient.ingredients;
export const selectLastAddedIngredientId = (state: RootState) => state.ingredient.lastAddedIngredientId;

export default ingredientReducer.reducer;
