import {  createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { GetAllIngredients } from "./ingredientApi";

class Ingredient {
    id: number;
    name: string;
    description?: string;

    constructor(id: number, name: string, description: string) {
        this.id = id;
        this.name = name;
        this.description = description;
    }
}

export interface IngredientState {
    ingredients: Array<Ingredient>;
    status: 'idle' | 'loading' | 'failed';
}
  
const initialState: IngredientState = {
    ingredients: [],
    status: 'idle',
};


export const getAllIngredientsAsync = createAsyncThunk(
    'ingredient/getAll',
    async (amount: number) => {
      const response = await GetAllIngredients(amount);
      
      return response.data;
    }
);

export const ingredientReducer = createSlice({
    name: 'ingredient',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        addNewIngredient: (state, action: PayloadAction<Ingredient>) => {
            state.ingredients.push(action.payload);
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
        .addCase(getAllIngredientsAsync.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(getAllIngredientsAsync.fulfilled, (state, action) => {
            state.status = 'idle';
            state.ingredients = action.payload;
        })
        .addCase(getAllIngredientsAsync.rejected, (state) => {
            state.status = 'failed';
        });
    },
});

export default ingredientReducer.reducer;
